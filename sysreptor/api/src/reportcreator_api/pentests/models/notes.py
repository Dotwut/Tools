from uuid import uuid4
from django.db import models

from reportcreator_api.archive.crypto.fields import EncryptedField
from reportcreator_api.pentests.models.common import LockableMixin
from reportcreator_api.users.models import PentestUser
from reportcreator_api.utils.models import BaseModel
from reportcreator_api.pentests import querysets


class NotebookPage(LockableMixin, BaseModel):
    note_id = models.UUIDField(default=uuid4, db_index=True, editable=False)
    title = EncryptedField(base_field=models.TextField(default=''))
    text = EncryptedField(base_field=models.TextField(default=''))
    checked = models.BooleanField(null=True, blank=True)
    icon_emoji = models.CharField(max_length=32, null=True, blank=True)
    status_emoji = models.CharField(max_length=32, null=True, blank=True)
    
    parent = models.ForeignKey(to='pentests.NotebookPage', on_delete=models.CASCADE, null=True, blank=True)
    order = models.PositiveIntegerField()

    project = models.ForeignKey(to='PentestProject', on_delete=models.CASCADE, null=True, related_name='notes')
    user = models.ForeignKey(to=PentestUser, on_delete=models.CASCADE, null=True, related_name='notes')

    objects = querysets.NotebookPageManager()

    class Meta:
        constraints = [
            models.CheckConstraint(
                name='has_project_or_user',
                check=(models.Q(project__isnull=False) & models.Q(user__isnull=True)) | 
                      (models.Q(project__isnull=True) & models.Q(user__isnull=False))
            ),
            models.UniqueConstraint(
                name='unique_note_id_per_project',
                fields=['project', 'note_id'],
                condition=models.Q(project__isnull=False)
            ),
            models.UniqueConstraint(
                name='unique_note_id_per_user',
                fields=['user', 'note_id'],
                condition=models.Q(user__isnull=False)
            ),
        ]

