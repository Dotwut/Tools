from django.db import models
from django.contrib.postgres.fields import ArrayField

from reportcreator_api.utils.models import BaseModel
from reportcreator_api.pentests.customfields.mixins import CustomFieldsMixin
from reportcreator_api.pentests.models.common import LockableMixin, ImportableMixin, ReviewStatus, LanguageMixin
from reportcreator_api.pentests import querysets
from reportcreator_api.pentests import cvss as cvss_utils
from reportcreator_api.pentests.customfields.types import FieldDefinition
from reportcreator_api.pentests.customfields.predefined_fields import FINDING_FIELDS_CORE, FINDING_FIELDS_PREDEFINED
from reportcreator_api.utils.decorators import cache


class FindingTemplate(CustomFieldsMixin, LockableMixin, LanguageMixin, ImportableMixin, BaseModel):
    usage_count = models.PositiveIntegerField(default=0, db_index=True)
    tags = ArrayField(
            base_field=models.CharField(max_length=255), 
            default=list, db_index=True)
    status = models.CharField(max_length=20, choices=ReviewStatus.choices, default=ReviewStatus.IN_PROGRESS, db_index=True)

    title = models.TextField(default='', db_index=True)

    cvss = models.CharField(max_length=255, default='n/a')
    risk_score = models.FloatField(default=0.0, db_index=True)
    risk_level = models.CharField(max_length=10, choices=cvss_utils.CVSSLevel.choices, default=cvss_utils.CVSSLevel.INFO, db_index=True)

    objects = models.Manager.from_queryset(querysets.FindingTemplateQueryset)()

    @classmethod
    @property
    @cache('FindingTemplate.field_definition', timeout=10)
    def field_definition(cls) -> dict[str, FieldDefinition]:
        return FindingTemplate.objects.get_field_definition()
    
    @property
    def core_field_names(self) -> list[str]:
        return list(FINDING_FIELDS_CORE.keys())
    
    def __str__(self) -> str:
        return self.title

    def save(self, *args, **kwargs):
        # Update risk score and level
        self.risk_score = cvss_utils.calculate_score(self.cvss)
        self.risk_level = cvss_utils.level_from_score(self.risk_score)

        return super().save(*args, **kwargs)

