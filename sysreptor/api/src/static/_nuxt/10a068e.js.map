{"version":3,"sources":["webpack:///./node_modules/vuetify/src/components/VAutocomplete/VAutocomplete.sass?90d2","webpack:///./components/S/Autocomplete.vue?3eb3","webpack:///./components/S/Autocomplete.vue","webpack:///./components/S/Autocomplete.vue?f7ff","webpack:///./node_modules/vuetify/src/components/VAutocomplete/VAutocomplete.sass","webpack:///../../../src/components/VAutocomplete/VAutocomplete.ts"],"names":["content","__esModule","default","module","i","locals","exports","add","props","outlined","type","Boolean","component","_self","staticClass","scopedSlots","proxy","name","staticRenderFns","___CSS_LOADER_EXPORT___","___CSS_LOADER_API_IMPORT___","push","defaultMenuProps","VSelectMenuProps","offsetY","offsetOverflow","transition","VSelect","extend","allowOverflow","autoSelectFirst","filter","Function","item","queryText","itemText","toLocaleLowerCase","indexOf","hideNoData","menuProps","options","noFilter","searchInput","String","data","lazySearch","this","computed","classes","call","selectedIndex","computedItems","filteredItems","selectedValues","selectedItems","map","getValue","hasDisplayedItems","hideSelected","some","hasItem","length","currentRange","selectedItem","getText","isSearching","internalSearch","allItems","value","getPropertyFromItem","text","get","set","val","$emit","isAnyValueAllowed","isDirty","searchIsDirty","multiple","menuCanShow","isFocused","$_menuProps","contentClass","trim","find","valueComparator","internalValue","listData","items","virtualizedItems","watch","document","addEventListener","onCopy","$refs","input","select","removeEventListener","blur","updateSelf","isMenuActive","hasSlot","oldVal","activateMenu","created","setSearch","destroyed","methods","onFilteredItemsChanged","preSelectedItem","menu","listIndex","setMenuIndex","findIndex","$nextTick","getTiles","onInternalSearchChanged","updateMenuDimensions","updateDimensions","changeSelectedIndex","keyCode","keyCodes","left","right","backspace","delete","deleteCurrentItem","curIndex","curItem","isInteractive","getDisabled","lastIndex","nextIndex","selectItem","setValue","clearableCallback","genInput","VTextField","mergeData","attrs","getObjectValueByPath","autocomplete","domProps","genInputSlot","slot","role","genSelections","onClick","e","onFocus","isAppendInner","target","onInput","badInput","validity","onKeyDown","ctrlKey","home","end","includes","onSpaceDown","onTabDown","onUpDown","preventDefault","setSelectedItems","event","currentItem","currentItemText","clipboardData","_a","setData","_b"],"mappings":"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","file":"10a068e.js","sourcesContent":["// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = require(\"!!../../../../css-loader/dist/cjs.js??ref--6-oneOf-1-1!../../../../postcss-loader/src/index.js??ref--6-oneOf-1-2!../../../../sass-loader/dist/cjs.js??ref--6-oneOf-1-3!./VAutocomplete.sass\");\nif(content.__esModule) content = content.default;\nif(typeof content === 'string') content = [[module.id, content, '']];\nif(content.locals) module.exports = content.locals;\n// add the styles to the DOM\nvar add = require(\"!../../../../vue-style-loader/lib/addStylesClient.js\").default\nvar update = add(\"50788f08\", content, true, {\"sourceMap\":false});","import mod from \"-!../../node_modules/babel-loader/lib/index.js??ref--2-0!../../node_modules/@nuxt/components/dist/loader.js??ref--0-0!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./Autocomplete.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../node_modules/babel-loader/lib/index.js??ref--2-0!../../node_modules/@nuxt/components/dist/loader.js??ref--0-0!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./Autocomplete.vue?vue&type=script&lang=js&\"","\nexport default {\n  props: {\n    outlined: {\n      type: Boolean,\n      default: true,\n    }\n  }\n}\n","import { render, staticRenderFns } from \"./Autocomplete.vue?vue&type=template&id=0f6b0b58&\"\nimport script from \"./Autocomplete.vue?vue&type=script&lang=js&\"\nexport * from \"./Autocomplete.vue?vue&type=script&lang=js&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports","// Imports\nvar ___CSS_LOADER_API_IMPORT___ = require(\"../../../../css-loader/dist/runtime/api.js\");\nvar ___CSS_LOADER_EXPORT___ = ___CSS_LOADER_API_IMPORT___(false);\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, \".v-autocomplete.v-input>.v-input__control>.v-input__slot{cursor:text}.v-autocomplete input{align-self:center}.v-autocomplete.v-select.v-input--is-focused input{min-width:64px}.v-autocomplete:not(.v-input--is-focused).v-select--chips input{max-height:0;padding:0}.v-autocomplete--is-selecting-index input{opacity:0}.v-autocomplete.v-text-field--enclosed:not(.v-text-field--solo):not(.v-text-field--single-line):not(.v-text-field--outlined) .v-select__slot>input{margin-top:24px}.v-autocomplete.v-text-field--enclosed:not(.v-text-field--solo):not(.v-text-field--single-line):not(.v-text-field--outlined).v-input--dense .v-select__slot>input{margin-top:20px}.v-autocomplete__content.v-menu__content,.v-autocomplete__content.v-menu__content .v-card{border-radius:0}\", \"\"]);\n// Exports\nmodule.exports = ___CSS_LOADER_EXPORT___;\n","// Styles\nimport './VAutocomplete.sass'\n\n// Extensions\nimport VSelect, { defaultMenuProps as VSelectMenuProps } from '../VSelect/VSelect'\nimport VTextField from '../VTextField/VTextField'\n\n// Utilities\nimport mergeData from '../../util/mergeData'\nimport {\n  getObjectValueByPath,\n  getPropertyFromItem,\n  keyCodes,\n} from '../../util/helpers'\n\n// Types\nimport { PropType, VNode } from 'vue'\nimport { PropValidator } from 'vue/types/options'\n\nconst defaultMenuProps = {\n  ...VSelectMenuProps,\n  offsetY: true,\n  offsetOverflow: true,\n  transition: false,\n}\n\n/* @vue/component */\nexport default VSelect.extend({\n  name: 'v-autocomplete',\n\n  props: {\n    allowOverflow: {\n      type: Boolean,\n      default: true,\n    },\n    autoSelectFirst: {\n      type: Boolean,\n      default: false,\n    },\n    filter: {\n      type: Function,\n      default: (item: any, queryText: string, itemText: string) => {\n        return itemText.toLocaleLowerCase().indexOf(queryText.toLocaleLowerCase()) > -1\n      },\n    } as PropValidator<(item: any, queryText: string, itemText: string) => boolean>,\n    hideNoData: Boolean,\n    menuProps: {\n      type: VSelect.options.props.menuProps.type,\n      default: () => defaultMenuProps,\n    },\n    noFilter: Boolean,\n    searchInput: {\n      type: String as PropType<string | null>,\n    },\n  },\n\n  data () {\n    return {\n      lazySearch: this.searchInput,\n    }\n  },\n\n  computed: {\n    classes (): object {\n      return {\n        ...VSelect.options.computed.classes.call(this),\n        'v-autocomplete': true,\n        'v-autocomplete--is-selecting-index': this.selectedIndex > -1,\n      }\n    },\n    computedItems (): object[] {\n      return this.filteredItems\n    },\n    selectedValues (): object[] {\n      return this.selectedItems.map(item => this.getValue(item))\n    },\n    hasDisplayedItems (): boolean {\n      return this.hideSelected\n        ? this.filteredItems.some(item => !this.hasItem(item))\n        : this.filteredItems.length > 0\n    },\n    currentRange (): number {\n      if (this.selectedItem == null) return 0\n\n      return String(this.getText(this.selectedItem)).length\n    },\n    filteredItems (): object[] {\n      if (!this.isSearching || this.noFilter || this.internalSearch == null) return this.allItems\n\n      return this.allItems.filter(item => {\n        const value = getPropertyFromItem(item, this.itemText)\n        const text = value != null ? String(value) : ''\n\n        return this.filter(item, String(this.internalSearch), text)\n      })\n    },\n    internalSearch: {\n      get (): string | null {\n        return this.lazySearch\n      },\n      set (val: any) { // TODO: this should be `string | null` but it breaks lots of other types\n        // emit update event only when the new\n        // search value is different from previous\n        if (this.lazySearch !== val) {\n          this.lazySearch = val\n          this.$emit('update:search-input', val)\n        }\n      },\n    },\n    isAnyValueAllowed (): boolean {\n      return false\n    },\n    isDirty (): boolean {\n      return this.searchIsDirty || this.selectedItems.length > 0\n    },\n    isSearching (): boolean {\n      return (\n        this.multiple &&\n        this.searchIsDirty\n      ) || (\n        this.searchIsDirty &&\n        this.internalSearch !== this.getText(this.selectedItem)\n      )\n    },\n    menuCanShow (): boolean {\n      if (!this.isFocused) return false\n\n      return this.hasDisplayedItems || !this.hideNoData\n    },\n    $_menuProps (): object {\n      const props = VSelect.options.computed.$_menuProps.call(this);\n      (props as any).contentClass = `v-autocomplete__content ${(props as any).contentClass || ''}`.trim()\n      return {\n        ...defaultMenuProps,\n        ...props,\n      }\n    },\n    searchIsDirty (): boolean {\n      return this.internalSearch != null &&\n        this.internalSearch !== ''\n    },\n    selectedItem (): any {\n      if (this.multiple) return null\n\n      return this.selectedItems.find(i => {\n        return this.valueComparator(this.getValue(i), this.getValue(this.internalValue))\n      })\n    },\n    listData () {\n      const data = VSelect.options.computed.listData.call(this) as any\n\n      data.props = {\n        ...data.props,\n        items: this.virtualizedItems,\n        noFilter: (\n          this.noFilter ||\n          !this.isSearching ||\n          !this.filteredItems.length\n        ),\n        searchInput: this.internalSearch,\n      }\n\n      return data\n    },\n  },\n\n  watch: {\n    filteredItems: 'onFilteredItemsChanged',\n    internalValue: 'setSearch',\n    isFocused (val) {\n      if (val) {\n        document.addEventListener('copy', this.onCopy)\n        this.$refs.input && this.$refs.input.select()\n      } else {\n        document.removeEventListener('copy', this.onCopy)\n        this.blur()\n        this.updateSelf()\n      }\n    },\n    isMenuActive (val) {\n      if (val || !this.hasSlot) return\n\n      this.lazySearch = null\n    },\n    items (val, oldVal) {\n      // If we are focused, the menu\n      // is not active, hide no data is enabled,\n      // and items change\n      // User is probably async loading\n      // items, try to activate the menu\n      if (\n        !(oldVal && oldVal.length) &&\n        this.hideNoData &&\n        this.isFocused &&\n        !this.isMenuActive &&\n        val.length\n      ) this.activateMenu()\n    },\n    searchInput (val: string) {\n      this.lazySearch = val\n    },\n    internalSearch: 'onInternalSearchChanged',\n    itemText: 'updateSelf',\n  },\n\n  created () {\n    this.setSearch()\n  },\n\n  destroyed () {\n    document.removeEventListener('copy', this.onCopy)\n  },\n\n  methods: {\n    onFilteredItemsChanged (val: never[], oldVal: never[]) {\n      // TODO: How is the watcher triggered\n      // for duplicate items? no idea\n      if (val === oldVal) return\n\n      if (!this.autoSelectFirst) {\n        const preSelectedItem = oldVal[this.$refs.menu.listIndex]\n\n        if (preSelectedItem) {\n          this.setMenuIndex(val.findIndex(i => i === preSelectedItem))\n        } else {\n          this.setMenuIndex(-1)\n        }\n        this.$emit('update:list-index', this.$refs.menu.listIndex)\n      }\n\n      this.$nextTick(() => {\n        if (\n          !this.internalSearch ||\n          (val.length !== 1 &&\n            !this.autoSelectFirst)\n        ) return\n\n        this.$refs.menu.getTiles()\n\n        if (this.autoSelectFirst && val.length) {\n          this.setMenuIndex(0)\n          this.$emit('update:list-index', this.$refs.menu.listIndex)\n        }\n      })\n    },\n    onInternalSearchChanged () {\n      this.updateMenuDimensions()\n    },\n    updateMenuDimensions () {\n      // Type from menuable is not making it through\n      this.isMenuActive && this.$refs.menu && this.$refs.menu.updateDimensions()\n    },\n    changeSelectedIndex (keyCode: number) {\n      // Do not allow changing of selectedIndex\n      // when search is dirty\n      if (this.searchIsDirty) return\n\n      if (this.multiple && keyCode === keyCodes.left) {\n        if (this.selectedIndex === -1) {\n          this.selectedIndex = this.selectedItems.length - 1\n        } else {\n          this.selectedIndex--\n        }\n      } else if (this.multiple && keyCode === keyCodes.right) {\n        if (this.selectedIndex >= this.selectedItems.length - 1) {\n          this.selectedIndex = -1\n        } else {\n          this.selectedIndex++\n        }\n      } else if (keyCode === keyCodes.backspace || keyCode === keyCodes.delete) {\n        this.deleteCurrentItem()\n      }\n    },\n    deleteCurrentItem () {\n      const curIndex = this.selectedIndex\n      const curItem = this.selectedItems[curIndex]\n\n      // Do nothing if input or item is disabled\n      if (\n        !this.isInteractive ||\n        this.getDisabled(curItem)\n      ) return\n\n      const lastIndex = this.selectedItems.length - 1\n\n      // Select the last item if\n      // there is no selection\n      if (\n        this.selectedIndex === -1 &&\n        lastIndex !== 0\n      ) {\n        this.selectedIndex = lastIndex\n\n        return\n      }\n\n      const length = this.selectedItems.length\n      const nextIndex = curIndex !== length - 1\n        ? curIndex\n        : curIndex - 1\n      const nextItem = this.selectedItems[nextIndex]\n\n      if (!nextItem) {\n        this.setValue(this.multiple ? [] : null)\n      } else {\n        this.selectItem(curItem)\n      }\n\n      this.selectedIndex = nextIndex\n    },\n    clearableCallback () {\n      this.internalSearch = null\n\n      VSelect.options.methods.clearableCallback.call(this)\n    },\n    genInput () {\n      const input = VTextField.options.methods.genInput.call(this)\n\n      input.data = mergeData(input.data!, {\n        attrs: {\n          'aria-activedescendant': getObjectValueByPath(this.$refs.menu, 'activeTile.id'),\n          autocomplete: getObjectValueByPath(input.data!, 'attrs.autocomplete', 'off'),\n        },\n        domProps: { value: this.internalSearch },\n      })\n\n      return input\n    },\n    genInputSlot () {\n      const slot = VSelect.options.methods.genInputSlot.call(this)\n\n      slot.data!.attrs!.role = 'combobox'\n\n      return slot\n    },\n    genSelections (): VNode | never[] {\n      return this.hasSlot || this.multiple\n        ? VSelect.options.methods.genSelections.call(this)\n        : []\n    },\n    onClick (e: MouseEvent) {\n      if (!this.isInteractive) return\n\n      this.selectedIndex > -1\n        ? (this.selectedIndex = -1)\n        : this.onFocus()\n\n      if (!this.isAppendInner(e.target)) this.activateMenu()\n    },\n    onInput (e: Event) {\n      if (\n        this.selectedIndex > -1 ||\n        !e.target\n      ) return\n\n      const target = e.target as HTMLInputElement\n      const value = target.value\n\n      // If typing and menu is not currently active\n      if (target.value) this.activateMenu()\n\n      if (!this.multiple && value === '') this.deleteCurrentItem()\n\n      this.internalSearch = value\n      this.badInput = target.validity && target.validity.badInput\n    },\n    onKeyDown (e: KeyboardEvent) {\n      const keyCode = e.keyCode\n\n      if (\n        e.ctrlKey ||\n        ![keyCodes.home, keyCodes.end].includes(keyCode)\n      ) {\n        VSelect.options.methods.onKeyDown.call(this, e)\n      }\n\n      // The ordering is important here\n      // allows new value to be updated\n      // and then moves the index to the\n      // proper location\n      this.changeSelectedIndex(keyCode)\n    },\n    onSpaceDown (e: KeyboardEvent) { /* noop */ },\n    onTabDown (e: KeyboardEvent) {\n      VSelect.options.methods.onTabDown.call(this, e)\n      this.updateSelf()\n    },\n    onUpDown (e: Event) {\n      // Prevent screen from scrolling\n      e.preventDefault()\n\n      // For autocomplete / combobox, cycling\n      // interfers with native up/down behavior\n      // instead activate the menu\n      this.activateMenu()\n    },\n    selectItem (item: object) {\n      VSelect.options.methods.selectItem.call(this, item)\n      this.setSearch()\n    },\n    setSelectedItems () {\n      VSelect.options.methods.setSelectedItems.call(this)\n\n      // #4273 Don't replace if searching\n      // #4403 Don't replace if focused\n      if (!this.isFocused) this.setSearch()\n    },\n    setSearch () {\n      // Wait for nextTick so selectedItem\n      // has had time to update\n      this.$nextTick(() => {\n        if (\n          !this.multiple ||\n          !this.internalSearch ||\n          !this.isMenuActive\n        ) {\n          this.internalSearch = (\n            !this.selectedItems.length ||\n            this.multiple ||\n            this.hasSlot\n          )\n            ? null\n            : this.getText(this.selectedItem)\n        }\n      })\n    },\n    updateSelf () {\n      if (\n        !this.searchIsDirty &&\n        !this.internalValue\n      ) return\n\n      if (\n        !this.multiple &&\n        !this.valueComparator(\n          this.internalSearch,\n          this.getValue(this.internalValue)\n        )\n      ) {\n        this.setSearch()\n      }\n    },\n    hasItem (item: any): boolean {\n      return this.selectedValues.indexOf(this.getValue(item)) > -1\n    },\n    onCopy (event: ClipboardEvent) {\n      if (this.selectedIndex === -1) return\n\n      const currentItem = this.selectedItems[this.selectedIndex]\n      const currentItemText = this.getText(currentItem)\n      event.clipboardData?.setData('text/plain', currentItemText)\n      event.clipboardData?.setData('text/vnd.vuetify.autocomplete.item+plain', currentItemText)\n      event.preventDefault()\n    },\n  },\n})\n"],"sourceRoot":""}