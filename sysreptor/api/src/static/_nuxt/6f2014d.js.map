{"version":3,"sources":["webpack:///./components/CodeEditor.vue","webpack:///./components/CodeEditor.vue?4c9b","webpack:///./components/CodeEditor.vue?54e6"],"names":["props","value","type","String","required","language","default","disabled","Boolean","emits","data","editor","watch","newVal","this","getValue","setValue","updateOptions","readOnly","mounted","monaco","create","$refs","theme","minimap","enabled","contextmenu","codeLens","folding","lightbulb","automaticLayout","wordWrap","fixedOverflowWidgets","onDidChangeModelContent","event","$emit","beforeDestroy","dispose","component","_c","_self","ref"],"mappings":"mGAAA,I,UCAwP,EDyBzO,CACbA,MAAO,CACLC,MAAO,CACLC,KAAMC,OACNC,UAAU,GAEZC,SAAU,CACRH,KAAMC,OACNG,QAAS,MAEXC,SAAU,CACRL,KAAMM,QACNF,SAAS,IAGbG,MAAO,CAAC,SACRC,KAAI,WACF,MAAO,CACLC,OAAQ,KAEZ,EACAC,MAAO,CACLX,MAAK,SAACY,GACAC,KAAKH,QAAUE,IAAWC,KAAKH,OAAOI,YACxCD,KAAKH,OAAOK,SAASH,EAEzB,EACAN,SAAQ,SAACM,GACHC,KAAKH,QACPG,KAAKH,OAAOM,cAAc,CAAEC,SAAUL,GAE1C,GAEFM,QAAO,WAAG,WAERL,KAAKH,OAASS,SAAcC,OAAOP,KAAKQ,MAAMX,OAAQ,CACpDV,MAAOa,KAAKb,MACZI,SAAUS,KAAKT,SACfa,SAAUJ,KAAKP,SACfgB,MAAO,KACPC,QAAS,CACPC,SAAS,GAEXC,aAAa,EACbC,UAAU,EACVC,SAAS,EACTC,WAAW,EACXC,iBAAiB,EACjBC,SAAU,KACVC,sBAAsB,IAExBlB,KAAKH,OAAOsB,yBAAwB,SAACC,GACnC,EAAKC,MAAM,QAAS,EAAKxB,OAAOI,WAClC,GACF,EACAqB,cAAa,WACPtB,KAAKH,QACPG,KAAKH,OAAO0B,SAEhB,G,QE7EEC,UAAY,YACd,GFRW,WAA+C,OAAOC,EAA5B,KAAYC,MAAMD,IAAa,MAAM,CAACE,IAAI,UACjF,GACsB,IESpB,EACA,KACA,KACA,MAIa,UAAAH,U","file":"6f2014d.js","sourcesContent":["\n// // Enable features\n// import 'monaco-editor/esm/vs/editor/contrib/bracketMatching/browser/bracketMatching';\n// import 'monaco-editor/esm/vs/editor/contrib/comment/browser/comment';\n// import 'monaco-editor/esm/vs/editor/contrib/cursorUndo/browser/cursorUndo'\n// import 'monaco-editor/esm/vs/editor/contrib/find/browser/findController'\n// import 'monaco-editor/esm/vs/editor/contrib/folding/browser/folding';\n// import 'monaco-editor/esm/vs/editor/contrib/indentation/browser/indentation'\n// // import 'monaco-editor/esm/vs/editor/contrib/inlineCompletions/browser/';\n// import 'monaco-editor/esm/vs/editor/contrib/linesOperations/browser/linesOperations'\n// import 'monaco-editor/esm/vs/editor/contrib/parameterHints/browser/parameterHints'\n// import 'monaco-editor/esm/vs/editor/contrib/rename/browser/rename'\n// import 'monaco-editor/esm/vs/editor/contrib/smartSelect/browser/smartSelect'\n// import 'monaco-editor/esm/vs/editor/contrib/suggest/browser/suggest'\n// import 'monaco-editor/esm/vs/editor/contrib/wordHighlighter/browser/wordHighlighter'\n// // import 'monaco-editor/esm/vs/editor/browser/controller/coreCommands.js';\n\n// // // Enable languages\n// import 'monaco-editor/esm/vs/language/html/monaco.contribution'\n// import 'monaco-editor/esm/vs/language/css/monaco.contribution'\n\n// import * as monaco from 'monaco-editor/esm/vs/editor/editor.api';\n\nimport * as monaco from 'monaco-editor';\n\nexport default {\n  props: {\n    value: {\n      type: String,\n      required: true,\n    },\n    language: {\n      type: String,\n      default: null,\n    },\n    disabled: {\n      type: Boolean,\n      default: false,\n    }\n  },\n  emits: ['input'],\n  data() {\n    return {\n      editor: null,\n    }\n  },\n  watch: {\n    value(newVal) {\n      if (this.editor && newVal !== this.editor.getValue()) {\n        this.editor.setValue(newVal);\n      }\n    },\n    disabled(newVal) {\n      if (this.editor) {\n        this.editor.updateOptions({ readOnly: newVal });\n      }\n    }\n  },\n  mounted() {\n    // https://microsoft.github.io/monaco-editor/api/interfaces/monaco.editor.IStandaloneEditorConstructionOptions.html\n    this.editor = monaco.editor.create(this.$refs.editor, {\n      value: this.value,\n      language: this.language,\n      readOnly: this.disabled,\n      theme: 'vs',\n      minimap: {\n        enabled: false,\n      },\n      contextmenu: false,\n      codeLens: false,\n      folding: true,\n      lightbulb: false,\n      automaticLayout: true,\n      wordWrap: 'on',\n      fixedOverflowWidgets: true,\n    });\n    this.editor.onDidChangeModelContent((event) => {\n      this.$emit('input', this.editor.getValue());\n    });\n  },\n  beforeDestroy() {\n    if (this.editor) {\n      this.editor.dispose();\n    }\n  }\n  \n}\n","import mod from \"-!../node_modules/babel-loader/lib/index.js??ref--2-0!../node_modules/@nuxt/components/dist/loader.js??ref--0-0!../node_modules/vue-loader/lib/index.js??vue-loader-options!./CodeEditor.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../node_modules/babel-loader/lib/index.js??ref--2-0!../node_modules/@nuxt/components/dist/loader.js??ref--0-0!../node_modules/vue-loader/lib/index.js??vue-loader-options!./CodeEditor.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./CodeEditor.vue?vue&type=template&id=90afae06&\"\nimport script from \"./CodeEditor.vue?vue&type=script&lang=js&\"\nexport * from \"./CodeEditor.vue?vue&type=script&lang=js&\"\n\n\n/* normalize component */\nimport normalizer from \"!../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports"],"sourceRoot":""}